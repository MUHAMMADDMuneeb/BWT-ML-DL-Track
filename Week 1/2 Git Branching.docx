          Git Branching Hands on Learning

Git branching is used to manage and organize development in a structured and efficient way. Key reasons for using Git branching include:
1.	Isolation: Develop new features, fix bugs, or experiment without affecting the main codebase.
2.	Collaboration: Multiple team members can work on different branches simultaneously.
3.	History and Traceability: Keep a clear history of changes and easily revert to previous states if needed.
4.	Workflow Management: Implement workflows like Gitflow, GitHub Flow, or Trunk-Based Development to streamline development processes.
Using Git branching enhances code quality, collaboration, and project management.


1.	Branch Creation and Management:
o	Creating branches (git branch branchname)
o	Switching branches (git checkout branchname)
o	Deleting branches (git branch -d branchname)
2.	Merging and Conflict Resolution:
o	Merging branches (git merge branchname)
o	Handling merge conflicts
3.	Advanced Branching Techniques:
o	Rebasing (git rebase)
o	Cherry-picking (git cherry-pick commitID)
4.	Remote Branch Operations:
o	Fetching and pulling updates (git fetch, git pull)
o	Pushing changes (git push)
These concepts are crucial for efficient version control and collaboration in software development projects.

